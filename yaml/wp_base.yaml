esphome:
  includes:
    - OneESP32ToRuleWP25AC/src/custom_climate.h
  on_boot:
    priority: -100
    then:
      - lambda: |-
          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kPASSIVKUEHLUNG),[](const SimpleVariant& value){
            const auto stringValue{Mapper::instance().getPassivkuehlung(value).value_or("Unbekannt")};
            const auto index = id(PASSIVKUEHLUNG).index_of(stringValue);
            if(index.has_value()) {
              id(PASSIVKUEHLUNG).publish_state(stringValue);
            }
          });
          queueRequest(Kessel, Property::kPASSIVKUEHLUNG);

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kPROGRAMMSCHALTER),[](const SimpleVariant& value){
            const auto stringValue{value.get<std::string>()};
            const auto index = id(PROGRAMMSCHALTER).index_of(stringValue);
            if(index.has_value()) {
              id(PROGRAMMSCHALTER).publish_state(stringValue);
            }
          });
          queueRequest(Kessel, Property::kPROGRAMMSCHALTER);

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kBETRIEBS_STATUS_2),[](const SimpleVariant& value){
            const std::bitset<2U> status_bits{static_cast<std::uint16_t>(value)};
            id(SOMMERBETRIEB_AKTIV).publish_state(status_bits.test(0U));
            id(OFEN_KAMIN_AKTIV).publish_state(status_bits.test(1U));
          });
          queueRequest(Kessel, Property::kBETRIEBS_STATUS_2);

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kBETRIEBS_STATUS),[](const SimpleVariant& value){
            const std::bitset<15U> status_bits{static_cast<std::uint16_t>(value)};
            id(SCHALTPROGRAMM_AKTIV).publish_state(status_bits.test(0U));
            id(VERDICHTER).publish_state(status_bits.test(1U));
            id(HEIZEN).publish_state(status_bits.test(2U));
            id(KUEHLEN).publish_state(status_bits.test(3U));
            id(WARMWASSERBEREITUNG).publish_state(status_bits.test(4U));
            id(ELEKTRISCHE_NACHERWAERMUNG).publish_state(status_bits.test(5U));
            id(SERVICE).publish_state(status_bits.test(6U));
            id(EVU_SPERRE).publish_state(status_bits.test(7U));
            id(FILTERWECHSEL_BEIDE).publish_state(status_bits.test(8U));
            // seems to be broken id(LUEFTUNG).publish_state(status_bits.test(9U));
            id(HEIZKREISPUMPE).publish_state(status_bits.test(10U));
            id(ABTAUEN_VERDAMPFER).publish_state(status_bits.test(11U));
            id(FILTERWECHSEL_ABLUFT).publish_state(status_bits.test(12U));
            id(FILTERWECHSEL_ZULUFT).publish_state(status_bits.test(13U));
            id(AUFHEIZPROGRAMM_AKTIV).publish_state(status_bits.test(14U));
          });
          queueRequest(Kessel, Property::kBETRIEBS_STATUS);

#########################################
#                                       #
#   Selects                             #
#                                       #
#########################################
select:
  - platform: template
    name: "PASSIVKUEHLUNG"
    id: PASSIVKUEHLUNG
    options:
      - "Aus"
      - "Ablüften"
      - "Zulüften"
      - "Bypass"
      - "Sommerkassette"
      - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    setup_priority: 100
    set_action:
      then:
        - lambda: |-
            const auto passivkuehlungId = Mapper::instance().getPassivkuehlungId(x);
            if(passivkuehlungId.has_value()) {
              sendData(Kessel, Property::kPASSIVKUEHLUNG, passivkuehlungId.value());
            }

  - platform: template
    name: "PROGRAMMSCHALTER"
    id: PROGRAMMSCHALTER
    options:
      - "Notbetrieb"
      - "Bereitschaft"
      - "Automatik"
      - "Tagbetrieb"
      - "Absenkbetrieb"
      - "Warmwasser"
      - "Handbetrieb"
      - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    setup_priority: 100
    set_action:
      then:
        - lambda: |-
            const auto betriebsartId = Mapper::instance().getBetriebsartId(x);
            if(betriebsartId.has_value()) {
              sendData(Kessel, Property::kPROGRAMMSCHALTER, betriebsartId.value());
            }

#########################################
#                                       #
#   Switches                            #
#                                       #
#########################################
switch:
  - platform: template
    name: "KUEHLUNG HK1"
    id: KUEHLUNGHK1
    optimistic: true
    turn_on_action:
      - lambda: |-
          sendData(HK1, Property::kKUEHLMODE, static_cast<std::uint16_t>(true));
    turn_off_action:
      - lambda: |-
          sendData(HK1, Property::kKUEHLMODE, static_cast<std::uint16_t>(false));

#########################################
#                                       #
#   Template Sensors                    #
#                                       #
#########################################
sensor:
  - platform: template
    name: "FAN POWER"
    id: FAN_POWER
    state_class: measurement
    device_class: power
    unit_of_measurement: "W"
  - platform: template
    name: "ELECTRIC HEATING POWER"
    id: ELECTRIC_HEATING_POWER
    state_class: measurement
    device_class: power
    unit_of_measurement: "W"

#########################################
#                                       #
#   Custom climates                     #
#                                       #
#########################################
climate:
  - platform: custom
    lambda: |-
      auto heating = new HeatingDayNight(id(RAUMISTTEMP),id(RAUMSOLLTEMP_I), id(HEIZEN), id(KUEHLEN), id(LUEFTUNG), Property::kRAUMSOLLTEMP_I, Property::kKUEHL_RAUMSOLL_TAG);
      App.register_component(heating);
      return {heating};
    climates:
      name: "Heating Day"
      visual:
        min_temperature: 10.0
        max_temperature: 25.0
        temperature_step:
          target_temperature: 0.1
          current_temperature: 0.1

  - platform: custom
    lambda: |-
      auto heating = new HeatingDayNight(id(RAUMISTTEMP),id(RAUMSOLLTEMP_NACHT), id(HEIZEN), id(KUEHLEN), id(LUEFTUNG), Property::kRAUMSOLLTEMP_NACHT, Property::kKUEHL_RAUMSOLL_NACHT);
      App.register_component(heating);
      return {heating};
    climates:
      name: "Heating Night"
      visual:
        min_temperature: 10.0
        max_temperature: 25.0
        temperature_step:
          target_temperature: 0.1
          current_temperature: 0.1

  - platform: custom
    lambda: |-
      auto hot_water = new HotWater(id(SPEICHERISTTEMP),id(EINSTELL_SPEICHERSOLLTEMP), id(WARMWASSERBEREITUNG), Property::kEINSTELL_SPEICHERSOLLTEMP);
      App.register_component(hot_water);
      return {hot_water};
    climates:
      name: "Hot Water"
      visual:
        min_temperature: 30.0
        max_temperature: 75.0
        temperature_step:
          target_temperature: 1.0
          current_temperature: 0.1

#########################################
#                                       #
#   Intervals                           #
#                                       #
#########################################
interval:
  - interval: $interval_once_in_a_while
    then:
    - lambda: |-
        queueRequest(Kessel, Property::kBETRIEBS_STATUS_2);

